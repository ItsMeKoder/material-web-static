{"version":3,"file":"data-table-cell.js","sourceRoot":"","sources":["data-table-cell.ts"],"names":[],"mappings":";AAAA,OAAO,oCAAoC,CAAC;AAE5C,OAAO,EAAC,IAAI,EAAE,UAAU,EAAC,MAAM,KAAK,CAAC;AACrC,OAAO,EAAC,QAAQ,EAAC,MAAM,4BAA4B,CAAC;AACpD,OAAO,EAAC,qBAAqB,EAAC,MAAM,2CAA2C,CAAC;AAMhF,MAAM,OAAO,aAAc,SAAQ,UAAU;IAA7C;;QA0CE,sBAAiB,GAAG,CAAC,CAAQ,EAAE,EAAE;YAC/B,MAAM,QAAQ,GAAG,CAAC,CAAC,MAAoB,CAAC;YACxC;;;;eAIG;YACH,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAyB,SAAS,EAAE;gBACpE,MAAM,EAAE;oBACN,OAAO,EAAE,QAAQ,CAAC,OAAO;iBAC1B;aACF,CAAC,CAAC,CAAC;QACN,CAAC,CAAC;IACJ,CAAC;IA5CU,iBAAiB;QACxB,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAE1B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;IACrB,CAAC;IAED,gBAAgB;IAChB,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC;IAEQ,MAAM;QACb,OAAO,IAAI,CAAA;0BACW,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,cAAc,EAAE;KAChE,CAAC;IACJ,CAAC;IAED,cAAc;QACZ,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE;YAC5B,OAAO,IAAI,CAAA,6DAA6D,IAAI,CAAC,iBAAiB,iBAAiB,CAAC;SACjH;QAED,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,aAAa;QACX,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,QAAQ,EAAE,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACrE,IAAI,CAAC,QAAQ,EAAE,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACpE,CAAC;CAeF;AAlD0C;IAAxC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC;2CAAoC;AAID;IAA1E,qBAAqB,CAAC,EAAC,QAAQ,EAAE,aAAa,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC;2DAA+C","sourcesContent":["import '@material/web/checkbox/checkbox.js';\nimport {MdCheckbox} from '@material/web/checkbox/checkbox.js';\nimport {html, LitElement} from 'lit';\nimport {property} from 'lit/decorators/property.js';\nimport {queryAssignedElements} from 'lit/decorators/query-assigned-elements.js';\n\nexport interface CellCheckedEventDetail {\n  checked: boolean\n}\n\nexport class DataTableCell extends LitElement {\n  /**\n   * Cell type. If `checkbox`, the checkbox inside the cell will also be created if not supplied via default slot.\n   * If `numeric`, the cell text will be aligned to the right.\n   */\n  @property({type: String, reflect: true}) type?: '' | 'numeric' | 'checkbox';\n\n  /** @internal */\n    // @ts-ignore\n  @queryAssignedElements({selector: 'md-checkbox', flatten: true}) protected checkboxSlotElements!: MdCheckbox[];\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    this.role = 'cell';\n  }\n\n  /** @internal */\n  get checkbox(): MdCheckbox | undefined {\n    return this.checkboxSlotElements?.[0];\n  }\n\n  override render() {\n    return html`\n      <slot @slotchange=${this.onSlotChanged}>${this.renderCheckbox()}</slot>\n    `;\n  }\n\n  renderCheckbox() {\n    if (this.type === 'checkbox') {\n      return html`<md-checkbox class=\"mdc-data-table__row-checkbox\" @change=${this.onCheckboxClicked}></md-checkbox>`;\n    }\n\n    return '';\n  }\n\n  onSlotChanged() {\n    this.requestUpdate();\n    this.checkbox?.removeEventListener('change', this.onCheckboxClicked);\n    this.checkbox?.addEventListener('change', this.onCheckboxClicked);\n  }\n\n  onCheckboxClicked = (e: Event) => {\n    const checkbox = e.target as MdCheckbox;\n    /**\n     * Event emitted when the cell checkbox has been checked or unchecked.\n     *\n     * Event detail: `CellCheckedEventDetail`.\n     */\n    this.dispatchEvent(new CustomEvent<CellCheckedEventDetail>('checked', {\n      detail: {\n        checked: checkbox.checked\n      }\n    }));\n  };\n}\n"]}