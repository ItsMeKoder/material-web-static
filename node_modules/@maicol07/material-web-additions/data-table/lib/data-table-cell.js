import { __decorate } from "tslib";
import '@material/web/checkbox/checkbox.js';
import { html, LitElement } from 'lit';
import { property } from 'lit/decorators/property.js';
import { queryAssignedElements } from 'lit/decorators/query-assigned-elements.js';
export class DataTableCell extends LitElement {
    constructor() {
        super(...arguments);
        this.onCheckboxClicked = (e) => {
            const checkbox = e.target;
            /**
             * Event emitted when the cell checkbox has been checked or unchecked.
             *
             * Event detail: `CellCheckedEventDetail`.
             */
            this.dispatchEvent(new CustomEvent('checked', {
                detail: {
                    checked: checkbox.checked
                }
            }));
        };
    }
    connectedCallback() {
        super.connectedCallback();
        this.role = 'cell';
    }
    /** @internal */
    get checkbox() {
        return this.checkboxSlotElements?.[0];
    }
    render() {
        return html `
      <slot @slotchange=${this.onSlotChanged}>${this.renderCheckbox()}</slot>
    `;
    }
    renderCheckbox() {
        if (this.type === 'checkbox') {
            return html `<md-checkbox class="mdc-data-table__row-checkbox" @change=${this.onCheckboxClicked}></md-checkbox>`;
        }
        return '';
    }
    onSlotChanged() {
        this.requestUpdate();
        this.checkbox?.removeEventListener('change', this.onCheckboxClicked);
        this.checkbox?.addEventListener('change', this.onCheckboxClicked);
    }
}
__decorate([
    property({ type: String, reflect: true })
], DataTableCell.prototype, "type", void 0);
__decorate([
    queryAssignedElements({ selector: 'md-checkbox', flatten: true })
], DataTableCell.prototype, "checkboxSlotElements", void 0);
//# sourceMappingURL=data-table-cell.js.map