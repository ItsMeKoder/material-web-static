import { LitElement, nothing, PropertyValues } from 'lit';
import { TextField } from '@material/web/textfield/lib/text-field.js';
import { IconButton } from '@material/web/iconbutton/lib/icon-button.js';
import '@material/web/textfield/outlined-text-field.js';
import '@material/web/iconbutton/standard-icon-button.js';
import '@material/web/checkbox/checkbox.js';
import '@material/web/icon/icon.js';
import { Checkbox } from '@material/web/checkbox/lib/checkbox.js';
export interface FilterTextFieldInputEventDetail {
    field: TextField;
    text: string;
    column: DataTableColumn;
    caseSensitive: boolean;
    customFiltering: boolean;
}
export interface FilterTextFieldKeyDownEventDetail {
    field: TextField;
    key: string;
    column: DataTableColumn;
}
export interface SortButtonClickedEventDetail {
    column: DataTableColumn;
    isDescending: boolean;
    customSorting: boolean;
}
export declare class DataTableColumn extends LitElement {
    /**
     * Column type. If `checkbox`, the checkbox inside the column will be also created if not supplied via the default slot.
     * If `numeric`, the column label will be aligned to the right.
     */
    type: '' | 'numeric' | 'checkbox';
    /**
     * Whether the column can be sorted.
     */
    sortable: boolean;
    /**
     * Whether the column is sorted.
     */
    sorted: boolean;
    /**
     * Whether the column is sorted descending.
     */
    sortedDescending: boolean;
    /**
     * Whether the column is displaying a sort button.
     */
    withSortButton: boolean;
    /**
     * Whether the column is using a custom sorting function.
     */
    customSorting: boolean;
    /**
     * Whether the column can be filtered.
     */
    filterable: boolean;
    /**
     * Label to show on the filter textfield.
     */
    filterTextFieldLabel: string;
    /**
     * Sets the filtering to be case-sensitive.
     */
    filterCaseSensitive: boolean;
    /**
     * Whether the column is using a custom filtering function.
     */
    customFiltering: boolean;
    /** @internal */
    sortButton?: IconButton;
    /** @internal */
    protected checkboxSlotElements: Checkbox[];
    connectedCallback(): void;
    /** @internal */
    get checkbox(): Checkbox | undefined;
    constructor();
    render(): import("lit-html").TemplateResult<1>;
    renderCheckbox(): "" | import("lit-html").TemplateResult<1>;
    renderFilterTextField(): import("lit-html").TemplateResult<1> | typeof nothing;
    renderSlot(): import("lit-html").TemplateResult<1>;
    renderSortButton(): import("lit-html").TemplateResult<1>;
    /** @internal */
    onCheckboxClicked(e: Event): void;
    onCheckboxSlotChanged(): void;
    /** @internal */
    onFilterTextFieldInput(e: InputEvent): void;
    /** @internal */
    onFilterTextFieldKeyDown(e: KeyboardEvent): void;
    /** @internal */
    onSortButtonClicked(e: Event): void;
    protected updated(_changedProperties: PropertyValues): void;
}
