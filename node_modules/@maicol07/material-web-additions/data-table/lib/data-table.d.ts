import '@material/web/linearprogress/linear-progress.js';
import '@material/web/iconbutton/filled-icon-button.js';
import '@material/web/select/outlined-select.js';
import '@material/web/select/select-option.js';
import '../data-table-footer.js';
import { PropertyValueMap } from 'lit';
import { DataTableColumn } from './data-table-column.js';
import { MDCDataTable, MDCDataTableAdapter, MDCDataTableFoundation } from '@material/data-table';
import { LinearProgress } from '@material/web/linearprogress/lib/linear-progress.js';
import { DataTableRow } from './data-table-row.js';
import { BaseElement } from '@material/mwc-base';
export interface RowSelectionChangedDetail {
    row: DataTableRow;
    rowIndex: number;
    selected: boolean;
}
export interface FilteredDetail {
    column: DataTableColumn;
    text: string;
    caseSensitive: boolean;
    columnIndex: number;
}
export interface SortedDetail {
    column: DataTableColumn;
    isDescending: boolean;
}
export declare class DataTable extends BaseElement {
    /**
     * Enable/disable pagination.
     */
    paginated: boolean;
    /**
     * JSON array with the page sizes to be used in the pagination and shown as page size select options.
     */
    pageSizes: string;
    /**
     * Label to show before the page size select.
     */
    pageSizesLabel: string;
    /**
     * Index of the first row to be shown on the current page.
     */
    firstRowOfPage: number;
    /** @internal */
    protected pageSizesArray: number[];
    /**
     * Size of the current page.
     */
    currentPageSize: number;
    /**
     * Index of the last row to be shown on the current page.
     */
    lastRowOfPage: number;
    /**
     * Label pattern to show after the page size select that indicates the current rows shown in the page.
     * It should contain the following parameters: `:firstRow`, `:lastRow`, `:totalRows`
     */
    paginationTotalLabel: string;
    /**
     * Whether the loading indicator is active.
     */
    inProgress: boolean;
    /**
     * Overall height of the table. Available in three different measures.
     */
    density?: '' | 'tight' | 'comfortable' | 'dense' | 'compact';
    /** @internal */
    columns: DataTableColumn[];
    /** @internal */
    rows: DataTableRow[];
    /** @internal */
    protected tableElement: HTMLTableElement;
    /** @internal */
    protected tableContainerElement: HTMLTableElement;
    /** @internal */
    protected headerRowElement: HTMLTableSectionElement;
    /** @internal */
    protected progressIndicator: LinearProgress;
    /** @internal */
    protected mdcDataTable?: MDCDataTable;
    /** @internal */
    protected mdcRoot: HTMLDivElement;
    /** @internal */
    protected readonly mdcFoundationClass: typeof MDCDataTableFoundation;
    /** @internal */
    protected mdcFoundation: MDCDataTableFoundation;
    protected columnFilters: Map<DataTableColumn, string>;
    /** @internal */
    protected get headerCheckboxRow(): DataTableColumn;
    /** @internal */
    protected get headerCheckbox(): import("@material/web/checkbox/lib/checkbox.js").Checkbox;
    render(): import("lit-html").TemplateResult<1>;
    onHeaderCellSlotChange(): void;
    /** @internal */
    rowCallback: (e: Event) => void;
    /** @internal */
    headerRowCallback: () => void;
    /** @internal */
    filterColumnCallback: (e: Event) => void;
    sortColumnCallback: (e: Event) => void;
    protected renderPagination(): "" | import("lit-html").TemplateResult<1>;
    protected onPageSizeSelected(e: InputEvent): void;
    protected onPaginationButtonClicked(event: Event): void;
    protected paginate(action?: 'current' | 'first' | 'previous' | 'next' | 'last'): void;
    protected firstUpdated(): void;
    protected updated(_changedProperties: PropertyValueMap<any>): void;
    protected createAdapter(): MDCDataTableAdapter;
    protected renderTemplate(template: string, params: Object): string;
    protected hideRows(rows?: DataTableRow[]): void;
    protected showRows(rows?: DataTableRow[]): void;
}
