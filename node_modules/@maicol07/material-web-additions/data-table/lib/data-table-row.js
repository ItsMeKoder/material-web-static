import { __decorate } from "tslib";
import { html, LitElement } from 'lit';
import { property } from 'lit/decorators/property.js';
import { queryAssignedElements } from 'lit/decorators/query-assigned-elements.js';
export class DataTableRow extends LitElement {
    constructor() {
        super(...arguments);
        /**
         * Whether the row is selected.
         */
        this.selected = false;
        /** @internal */
        this.onCheckboxClicked = (e) => {
            const event = e;
            this.selected = event.detail.checked;
            /**
             * Event emitted when a row has been selected or unselected.
             *
             * Event detail: `RowCheckedEventData`.
             */
            this.dispatchEvent(new CustomEvent('selected', {
                detail: {
                    selected: event.detail.checked
                }
            }));
        };
    }
    connectedCallback() {
        super.connectedCallback();
        this.role = 'row';
        this.slot = 'row';
    }
    /** @internal */
    get checkboxCell() {
        return this.checkboxCells?.[0];
    }
    render() {
        return html `
      <slot @slotchange="${this.requestUpdate}"></slot>`;
    }
    updated(_changedProperties) {
        super.updated(_changedProperties);
        const checkboxCell = this.checkboxCell;
        if (!checkboxCell && this.checkboxCells.length === 0) {
            // Wait for the checkbox cell to be created
            for (const cell of this.cells) {
                cell.updateComplete.then(() => {
                    if (cell.type === 'checkbox' && !this.isUpdatePending) {
                        this.requestUpdate();
                    }
                });
            }
        }
        if (checkboxCell) {
            checkboxCell.removeEventListener('checked', this.onCheckboxClicked);
            checkboxCell.addEventListener('checked', this.onCheckboxClicked);
            const checkbox = checkboxCell.checkbox;
            if (checkbox) {
                checkbox.checked = this.selected;
            }
        }
    }
}
__decorate([
    property({ type: Boolean, reflect: true })
], DataTableRow.prototype, "selected", void 0);
__decorate([
    property({ type: String, reflect: true })
], DataTableRow.prototype, "density", void 0);
__decorate([
    queryAssignedElements({ selector: 'md-data-table-cell' })
], DataTableRow.prototype, "cells", void 0);
__decorate([
    queryAssignedElements({ selector: 'md-data-table-cell[type="checkbox"]' })
], DataTableRow.prototype, "checkboxCells", void 0);
//# sourceMappingURL=data-table-row.js.map