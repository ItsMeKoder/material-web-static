import { __decorate } from "tslib";
import { html, LitElement, nothing } from 'lit';
import { property } from 'lit/decorators/property.js';
import { queryAssignedElements } from 'lit/decorators/query-assigned-elements.js';
import { query } from 'lit/decorators/query.js';
import '@material/web/textfield/outlined-text-field.js';
import '@material/web/iconbutton/standard-icon-button.js';
import '@material/web/checkbox/checkbox.js';
import '@material/web/icon/icon.js';
export class DataTableColumn extends LitElement {
    connectedCallback() {
        super.connectedCallback();
        this.role = 'column-header';
        this.slot = 'header-cell';
    }
    /** @internal */
    get checkbox() {
        return this.checkboxSlotElements?.[0];
    }
    constructor() {
        super();
        /**
         * Column type. If `checkbox`, the checkbox inside the column will be also created if not supplied via the default slot.
         * If `numeric`, the column label will be aligned to the right.
         */
        this.type = '';
        /**
         * Whether the column can be sorted.
         */
        this.sortable = false;
        /**
         * Whether the column is sorted.
         */
        this.sorted = false;
        /**
         * Whether the column is sorted descending.
         */
        this.sortedDescending = false;
        /**
         * Whether the column is displaying a sort button.
         */
        this.withSortButton = false;
        /**
         * Whether the column is using a custom sorting function.
         */
        this.customSorting = false;
        /**
         * Whether the column can be filtered.
         */
        this.filterable = false;
        /**
         * Label to show on the filter textfield.
         */
        this.filterTextFieldLabel = 'Filter';
        /**
         * Sets the filtering to be case-sensitive.
         */
        this.filterCaseSensitive = false;
        /**
         * Whether the column is using a custom filtering function.
         */
        this.customFiltering = false;
        this.addEventListener('click', () => {
            this.withSortButton = !this.withSortButton;
        });
    }
    render() {
        return html `
        ${this.renderCheckbox()}
        ${this.renderSlot()}
    `;
    }
    renderCheckbox() {
        if (this.type === 'checkbox') {
            return html `
          <slot name="checkbox" @slotchange=${this.onCheckboxSlotChanged}>
              <md-checkbox
                      class="mdc-data-table__header-row-checkbox"
                      @change=${this.onCheckboxClicked}
                      aria-label="Toggle all rows"></md-checkbox>
          </slot>
      `;
        }
        return '';
    }
    renderFilterTextField() {
        if (this.filterable && this.type !== 'checkbox') {
            return html `
          <slot name="filter-textfield" class="mdc-data-table__filter-textfield">
              <md-outlined-text-field
                      label="${this.filterTextFieldLabel}"
                      style="--_container-padding-vertical: var(--_pagination-outlined-select-field-container-padding-vertical);"
                      @input=${this.onFilterTextFieldInput}
                      @keydown=${this.onFilterTextFieldKeyDown}
                      @click="${(e) => e.stopPropagation()}"
              />
          </slot>
      `;
        }
        return nothing;
    }
    renderSlot() {
        return html `
        <div class="mdc-data-table__header-cell-filter-wrapper">
            ${this.sortable ? this.renderSortButton() : html `
                <slot class="mdc-data-table__header-cell-label"></slot>`}
            ${this.renderFilterTextField()}
        </div>
    `;
    }
    renderSortButton() {
        return html `
        <div class="mdc-data-table__header-cell-wrapper">
            <md-standard-icon-button ?selected=${this.sortedDescending}
                                     toggle
                                     @change=${this.onSortButtonClicked}
                                     @click="${(e) => e.stopPropagation()}"
                                     aria-hidden="${this.withSortButton ? 'false' : 'true'}"
                                     ?hidden="${!this.withSortButton}">
                <slot name="sort-icon-on" slot="selectedIcon">
                    <md-icon>arrow_downward</md-icon>
                </slot>
                <slot name="sort-icon-off">
                    <md-icon>arrow_upward</md-icon>
                </slot>
            </md-standard-icon-button>
            &nbsp;
            <slot class="mdc-data-table__header-cell-label"></slot>
        </div>
    `;
    }
    /** @internal */
    onCheckboxClicked(e) {
        const checkbox = e.target;
        /**
         * Event emitted when the column checkbox has been checked or unchecked.
         *
         * Event detail: `CellCheckedEventDetail`;
         */
        this.dispatchEvent(new CustomEvent('checked', {
            detail: {
                checked: checkbox.checked ?? false
            }
        }));
    }
    onCheckboxSlotChanged() {
        this.checkbox?.removeEventListener('change', this.onCheckboxClicked);
        this.checkbox?.addEventListener('change', this.onCheckboxClicked);
    }
    /** @internal */
    onFilterTextFieldInput(e) {
        const textfield = e.target;
        /**
         * Event emitted when the user has typed in column filter textfield.
         *
         * Event detail: `FilterTextFieldInputEventDetail`;
         */
        this.dispatchEvent(new CustomEvent('filter', {
            detail: {
                field: textfield,
                text: textfield.value,
                column: this,
                caseSensitive: this.filterCaseSensitive,
                customFiltering: this.customFiltering
            }
        }));
    }
    /** @internal */
    onFilterTextFieldKeyDown(e) {
        const textfield = e.target;
        /**
         * Event emitted when the user has typed in column filter textfield.
         *
         * Event detail: `FilterTextFieldKeyDownEventDetail`;
         */
        this.dispatchEvent(new CustomEvent('keydown', {
            detail: {
                field: textfield,
                key: e.key,
                column: this,
            }
        }));
    }
    /** @internal */
    onSortButtonClicked(e) {
        this.sortedDescending = this.sortButton.selected;
        /**
         * Event emitted when the user has typed in column filter textfield.
         *
         * Event detail: `SortButtonClickedEventDetail`;
         */
        this.dispatchEvent(new CustomEvent('sort', {
            detail: {
                column: this,
                isDescending: this.sortedDescending,
                customSorting: this.customSorting
            }
        }));
    }
    updated(_changedProperties) {
        if (_changedProperties.has('sorted')) {
            this.withSortButton = this.sortable && this.sorted;
        }
        super.updated(_changedProperties);
    }
}
__decorate([
    property({ type: String, reflect: true })
], DataTableColumn.prototype, "type", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], DataTableColumn.prototype, "sortable", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], DataTableColumn.prototype, "sorted", void 0);
__decorate([
    property({ type: Boolean, reflect: true, attribute: 'sorted-descending' })
], DataTableColumn.prototype, "sortedDescending", void 0);
__decorate([
    property({ type: Boolean, reflect: true, attribute: 'with-sort-button' })
], DataTableColumn.prototype, "withSortButton", void 0);
__decorate([
    property({ type: Boolean, attribute: 'custom-sorting' })
], DataTableColumn.prototype, "customSorting", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], DataTableColumn.prototype, "filterable", void 0);
__decorate([
    property({ type: String })
], DataTableColumn.prototype, "filterTextFieldLabel", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], DataTableColumn.prototype, "filterCaseSensitive", void 0);
__decorate([
    property({ type: Boolean, attribute: 'custom-filtering' })
], DataTableColumn.prototype, "customFiltering", void 0);
__decorate([
    query('md-standard-icon-button')
], DataTableColumn.prototype, "sortButton", void 0);
__decorate([
    queryAssignedElements({ slot: 'checkbox', flatten: true })
], DataTableColumn.prototype, "checkboxSlotElements", void 0);
//# sourceMappingURL=data-table-column.js.map