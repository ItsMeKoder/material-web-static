{"version":3,"file":"data-table-row.js","sourceRoot":"","sources":["data-table-row.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,IAAI,EAAE,UAAU,EAAmB,MAAM,KAAK,CAAC;AAEvD,OAAO,EAAC,QAAQ,EAAC,MAAM,4BAA4B,CAAC;AACpD,OAAO,EAAC,qBAAqB,EAAC,MAAM,2CAA2C,CAAC;AAMhF,MAAM,OAAO,YAAa,SAAQ,UAAU;IAA5C;;QACE;;WAEG;QACuC,aAAQ,GAAG,KAAK,CAAC;QAmC3D,gBAAgB;QAChB,sBAAiB,GAAG,CAAC,CAAQ,EAAE,EAAE;YAC/B,MAAM,KAAK,GAAG,CAAwC,CAAC;YACvD,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC;YACrC;;;;eAIG;YACH,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAwB,UAAU,EAAE;gBACpE,MAAM,EAAE;oBACN,QAAQ,EAAE,KAAK,CAAC,MAAM,CAAC,OAAO;iBAC/B;aACF,CAAC,CAAC,CAAC;QACN,CAAC,CAAC;IA2BJ,CAAC;IA1DU,iBAAiB;QACxB,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAE1B,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QAClB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IACpB,CAAC;IAED,gBAAgB;IAChB,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC;IACjC,CAAC;IAEQ,MAAM;QACb,OAAO,IAAI,CAAA;2BACY,IAAI,CAAC,aAAa,WAAW,CAAC;IACvD,CAAC;IAkBkB,OAAO,CAAC,kBAAqE;QAC9F,KAAK,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;QAElC,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACvC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;YACpD,2CAA2C;YAC3C,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;gBAC7B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE;oBAC5B,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;wBACrD,IAAI,CAAC,aAAa,EAAE,CAAC;qBACtB;gBACH,CAAC,CAAC,CAAC;aACJ;SACF;QAED,IAAI,YAAY,EAAE;YAChB,YAAY,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACpE,YAAY,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAEjE,MAAM,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;YACvC,IAAI,QAAQ,EAAE;gBACZ,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;aAClC;SACF;IACH,CAAC;CACF;AA5E2C;IAAzC,QAAQ,CAAC,EAAC,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC;8CAAkB;AAIlB;IAAxC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC;6CAA8D;AAM7C;IAAxD,qBAAqB,CAAC,EAAC,QAAQ,EAAE,oBAAoB,EAAC,CAAC;2CAAyB;AAMG;IAAnF,qBAAqB,CAAC,EAAC,QAAQ,EAAE,qCAAqC,EAAC,CAAC;mDAA2C","sourcesContent":["import {html, LitElement, PropertyValueMap} from 'lit';\nimport {CellCheckedEventDetail, DataTableCell} from './data-table-cell.js';\nimport {property} from 'lit/decorators/property.js';\nimport {queryAssignedElements} from 'lit/decorators/query-assigned-elements.js';\n\nexport interface RowCheckedEventDetail {\n  selected: boolean;\n}\n\nexport class DataTableRow extends LitElement {\n  /**\n   * Whether the row is selected.\n   */\n  @property({type: Boolean, reflect: true}) selected = false;\n  /**\n   * Overall height of the table. Available in three different measures.\n   */\n  @property({type: String, reflect: true}) density?: '' | 'tight' | 'comfortable' | 'dense' | 'compact';\n\n  /**\n   * Cells of the row.\n   * @internal\n   */\n  @queryAssignedElements({selector: 'md-data-table-cell'}) cells!: DataTableCell[];\n  /**\n   * Cells with type `checkbox`.\n   *\n   * @internal\n   */\n  @queryAssignedElements({selector: 'md-data-table-cell[type=\"checkbox\"]'}) protected checkboxCells!: DataTableCell[];\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    this.role = 'row';\n    this.slot = 'row';\n  }\n\n  /** @internal */\n  get checkboxCell(): DataTableCell | undefined {\n    return this.checkboxCells?.[0];\n  }\n\n  override render() {\n    return html`\n      <slot @slotchange=\"${this.requestUpdate}\"></slot>`;\n  }\n\n  /** @internal */\n  onCheckboxClicked = (e: Event) => {\n    const event = e as CustomEvent<CellCheckedEventDetail>;\n    this.selected = event.detail.checked;\n    /**\n     * Event emitted when a row has been selected or unselected.\n     *\n     * Event detail: `RowCheckedEventData`.\n     */\n    this.dispatchEvent(new CustomEvent<RowCheckedEventDetail>('selected', {\n      detail: {\n        selected: event.detail.checked\n      }\n    }));\n  };\n\n  protected override updated(_changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>) {\n    super.updated(_changedProperties);\n\n    const checkboxCell = this.checkboxCell;\n    if (!checkboxCell && this.checkboxCells.length === 0) {\n      // Wait for the checkbox cell to be created\n      for (const cell of this.cells) {\n        cell.updateComplete.then(() => {\n          if (cell.type === 'checkbox' && !this.isUpdatePending) {\n            this.requestUpdate();\n          }\n        });\n      }\n    }\n\n    if (checkboxCell) {\n      checkboxCell.removeEventListener('checked', this.onCheckboxClicked);\n      checkboxCell.addEventListener('checked', this.onCheckboxClicked);\n\n      const checkbox = checkboxCell.checkbox;\n      if (checkbox) {\n        checkbox.checked = this.selected;\n      }\n    }\n  }\n}\n"]}