{"version":3,"file":"data-table-column.js","sourceRoot":"","sources":["data-table-column.ts"],"names":[],"mappings":"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","sourcesContent":["import {html, LitElement, nothing, PropertyValues} from 'lit';\nimport {property} from 'lit/decorators/property.js';\nimport {queryAssignedElements} from 'lit/decorators/query-assigned-elements.js';\nimport {query} from 'lit/decorators/query.js';\nimport {TextField} from '@material/web/textfield/lib/text-field.js';\nimport {IconButton} from '@material/web/iconbutton/lib/icon-button.js';\nimport '@material/web/textfield/outlined-text-field.js';\nimport '@material/web/iconbutton/standard-icon-button.js';\nimport '@material/web/checkbox/checkbox.js';\nimport '@material/web/icon/icon.js';\nimport {CellCheckedEventDetail} from './data-table-cell.js';\nimport {Checkbox} from '@material/web/checkbox/lib/checkbox.js';\n\nexport interface FilterTextFieldInputEventDetail {\n  field: TextField,\n  text: string,\n  column: DataTableColumn,\n  caseSensitive: boolean,\n  customFiltering: boolean\n}\n\nexport interface FilterTextFieldKeyDownEventDetail {\n  field: TextField,\n  key: string,\n  column: DataTableColumn,\n}\n\nexport interface SortButtonClickedEventDetail {\n  column: DataTableColumn,\n  isDescending: boolean,\n  customSorting: boolean,\n}\n\nexport class DataTableColumn extends LitElement {\n  /**\n   * Column type. If `checkbox`, the checkbox inside the column will be also created if not supplied via the default slot.\n   * If `numeric`, the column label will be aligned to the right.\n   */\n  @property({type: String, reflect: true}) type: '' | 'numeric' | 'checkbox' = '';\n  /**\n   * Whether the column can be sorted.\n   */\n  @property({type: Boolean, reflect: true}) sortable = false;\n  /**\n   * Whether the column is sorted.\n   */\n  @property({type: Boolean, reflect: true}) sorted = false;\n  /**\n   * Whether the column is sorted descending.\n   */\n  @property({type: Boolean, reflect: true, attribute: 'sorted-descending'}) sortedDescending = false;\n  /**\n   * Whether the column is displaying a sort button.\n   */\n  @property({type: Boolean, reflect: true, attribute: 'with-sort-button'}) withSortButton = false;\n  /**\n   * Whether the column is using a custom sorting function.\n   */\n  @property({type: Boolean, attribute: 'custom-sorting'}) customSorting = false;\n  /**\n   * Whether the column can be filtered.\n   */\n  @property({type: Boolean, reflect: true}) filterable = false;\n  /**\n   * Label to show on the filter textfield.\n   */\n  @property({type: String}) filterTextFieldLabel = 'Filter';\n  /**\n   * Sets the filtering to be case-sensitive.\n   */\n  @property({type: Boolean, reflect: true}) filterCaseSensitive = false;\n  /**\n   * Whether the column is using a custom filtering function.\n   */\n  @property({type: Boolean, attribute: 'custom-filtering'}) customFiltering = false;\n\n  /** @internal */\n    // @ts-ignore\n  @query('md-standard-icon-button') sortButton?: IconButton;\n  /** @internal */\n    // @ts-ignore\n  @queryAssignedElements({slot: 'checkbox', flatten: true}) protected checkboxSlotElements!: Checkbox[];\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    this.role = 'column-header';\n    this.slot = 'header-cell';\n  }\n\n  /** @internal */\n  get checkbox(): Checkbox | undefined {\n    return this.checkboxSlotElements?.[0];\n  }\n\n  constructor() {\n    super();\n    this.addEventListener('click', () => {\n      this.withSortButton = !this.withSortButton;\n    });\n  }\n\n  override render() {\n    return html`\n        ${this.renderCheckbox()}\n        ${this.renderSlot()}\n    `;\n  }\n\n  renderCheckbox() {\n    if (this.type === 'checkbox') {\n      return html`\n          <slot name=\"checkbox\" @slotchange=${this.onCheckboxSlotChanged}>\n              <md-checkbox\n                      class=\"mdc-data-table__header-row-checkbox\"\n                      @change=${this.onCheckboxClicked}\n                      aria-label=\"Toggle all rows\"></md-checkbox>\n          </slot>\n      `;\n    }\n    return '';\n  }\n\n  renderFilterTextField() {\n    if (this.filterable && this.type !== 'checkbox') {\n      return html`\n          <slot name=\"filter-textfield\" class=\"mdc-data-table__filter-textfield\">\n              <md-outlined-text-field\n                      label=\"${this.filterTextFieldLabel}\"\n                      style=\"--_container-padding-vertical: var(--_pagination-outlined-select-field-container-padding-vertical);\"\n                      @input=${this.onFilterTextFieldInput}\n                      @keydown=${this.onFilterTextFieldKeyDown}\n                      @click=\"${(e: PointerEvent) => e.stopPropagation()}\"\n              />\n          </slot>\n      `;\n    }\n    return nothing;\n  }\n\n  renderSlot() {\n    return html`\n        <div class=\"mdc-data-table__header-cell-filter-wrapper\">\n            ${this.sortable ? this.renderSortButton() : html`\n                <slot class=\"mdc-data-table__header-cell-label\"></slot>`}\n            ${this.renderFilterTextField()}\n        </div>\n    `;\n  }\n\n  renderSortButton() {\n    return html`\n        <div class=\"mdc-data-table__header-cell-wrapper\">\n            <md-standard-icon-button ?selected=${this.sortedDescending}\n                                     toggle\n                                     @change=${this.onSortButtonClicked}\n                                     @click=\"${(e: PointerEvent) => e.stopPropagation()}\"\n                                     aria-hidden=\"${this.withSortButton ? 'false' : 'true'}\"\n                                     ?hidden=\"${!this.withSortButton}\">\n                <slot name=\"sort-icon-on\" slot=\"selectedIcon\">\n                    <md-icon>arrow_downward</md-icon>\n                </slot>\n                <slot name=\"sort-icon-off\">\n                    <md-icon>arrow_upward</md-icon>\n                </slot>\n            </md-standard-icon-button>\n            &nbsp;\n            <slot class=\"mdc-data-table__header-cell-label\"></slot>\n        </div>\n    `;\n  }\n\n  /** @internal */\n  onCheckboxClicked(e: Event) {\n    const checkbox = e.target as Checkbox;\n    /**\n     * Event emitted when the column checkbox has been checked or unchecked.\n     *\n     * Event detail: `CellCheckedEventDetail`;\n     */\n    this.dispatchEvent(new CustomEvent<CellCheckedEventDetail>('checked', {\n      detail: {\n        checked: checkbox.checked ?? false\n      }\n    }));\n  }\n\n  onCheckboxSlotChanged() {\n    this.checkbox?.removeEventListener('change', this.onCheckboxClicked);\n    this.checkbox?.addEventListener('change', this.onCheckboxClicked);\n  }\n\n  /** @internal */\n  onFilterTextFieldInput(e: InputEvent) {\n    const textfield = e.target as TextField;\n    /**\n     * Event emitted when the user has typed in column filter textfield.\n     *\n     * Event detail: `FilterTextFieldInputEventDetail`;\n     */\n    this.dispatchEvent(new CustomEvent<FilterTextFieldInputEventDetail>('filter', {\n      detail: {\n        field: textfield,\n        text: textfield.value,\n        column: this,\n        caseSensitive: this.filterCaseSensitive,\n        customFiltering: this.customFiltering\n      }\n    }));\n  }\n\n  /** @internal */\n  onFilterTextFieldKeyDown(e: KeyboardEvent) {\n    const textfield = e.target as TextField;\n    /**\n     * Event emitted when the user has typed in column filter textfield.\n     *\n     * Event detail: `FilterTextFieldKeyDownEventDetail`;\n     */\n    this.dispatchEvent(new CustomEvent<FilterTextFieldKeyDownEventDetail>('keydown', {\n      detail: {\n        field: textfield,\n        key: e.key,\n        column: this,\n      }\n    }));\n  }\n\n  /** @internal */\n  onSortButtonClicked(e: Event) {\n    this.sortedDescending = this.sortButton.selected;\n    /**\n     * Event emitted when the user has typed in column filter textfield.\n     *\n     * Event detail: `SortButtonClickedEventDetail`;\n     */\n    this.dispatchEvent(new CustomEvent<SortButtonClickedEventDetail>('sort', {\n      detail: {\n        column: this,\n        isDescending: this.sortedDescending,\n        customSorting: this.customSorting\n      }\n    }));\n  }\n\n  protected override updated(_changedProperties: PropertyValues) {\n    if (_changedProperties.has('sorted')) {\n      this.withSortButton = this.sortable && this.sorted;\n    }\n    super.updated(_changedProperties);\n  }\n}\n"]}