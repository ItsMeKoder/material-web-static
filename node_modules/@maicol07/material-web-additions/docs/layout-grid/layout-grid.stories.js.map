{"version":3,"file":"layout-grid.stories.js","sourceRoot":"","sources":["layout-grid.stories.ts"],"names":[],"mappings":"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","sourcesContent":["import '../../layout-grid/layout-grid.js';\nimport {Meta, StoryObj} from '@storybook/web-components';\nimport {MdLayoutGrid} from '../../layout-grid/layout-grid.js';\nimport {html} from 'lit';\nimport './styles.scss';\nimport dedent from 'ts-dedent';\n\ntype LayoutGridStory = StoryObj<Partial<MdLayoutGrid>>;\n\nconst meta: Meta = {\n  title: 'Components/Layout Grid',\n  component: 'md-layout-grid',\n  // More on argTypes: https://storybook.js.org/docs/web-components/api/argtypes\n  argTypes: {\n    align: {\n      control: 'select',\n      options: ['center', 'left', 'right'],\n    },\n  },\n  args: {\n    fixedColumnWidth: false,\n  },\n  parameters: {\n    cssprops: {\n      'mdc-layout-grid-margin-desktop': {\n        value: '24px',\n        description:\n            'Space between the edge of the grid and the edge of the first cell for `desktop` device.',\n        control: 'text',\n      },\n      'mdc-layout-grid-gutter-desktop': {\n        value: '24px',\n        description: 'Space between edges of adjacent cells for `desktop` device.',\n        control: 'text',\n      },\n      'mdc-layout-grid-column-width-desktop': {\n        value: '72px',\n        description: 'Column width for `desktop` device.',\n        control: 'text',\n      },\n      'mdc-layout-grid-margin-tablet': {\n        value: '16px',\n        description:\n            'Space between the edge of the grid and the edge of the first cell for `desktop` device.',\n        control: 'text',\n      },\n      'mdc-layout-grid-gutter-tablet': {\n        value: '16px',\n        description: 'Space between edges of adjacent cells for `desktop` device.',\n        control: 'text',\n      },\n      'mdc-layout-grid-column-width-tablet': {\n        value: '72px',\n        description: 'Column width for `desktop` device.',\n        control: 'text',\n      },\n      'mdc-layout-grid-margin-phone': {\n        value: '16px',\n        description:\n            'Space between the edge of the grid and the edge of the first cell for `desktop` device.',\n        control: 'text',\n      },\n      'mdc-layout-grid-gutter-phone': {\n        value: '16px',\n        description: 'Space between edges of adjacent cells for `desktop` device.',\n        control: 'text',\n      },\n      'mdc-layout-grid-column-width-phone': {\n        value: '72px',\n        description: 'Column width for `desktop` device.',\n        control: 'text',\n      },\n    }\n  },\n};\nexport default meta;\n\n// More on component templates: https://storybook.js.org/docs/web-components/writing-stories/introduction#using-args\nexport const Basic: LayoutGridStory = {\n  render: ({fixedColumnWidth, align}) => html`\n    <md-layout-grid class=\"demo-grid\" ?fixedColumnWidth=\"${fixedColumnWidth}\" align=\"${align}\">\n      <div class=\"demo-cell\"></div>\n      <div class=\"demo-cell\"></div>\n      <div class=\"demo-cell\"></div>\n    </md-layout-grid>\n  `,\n};\nexport const CustomSpanSize: LayoutGridStory = {\n  render: ({fixedColumnWidth, align}) => html`\n    <md-layout-grid class=\"demo-grid\" ?fixedColumnWidth=\"${fixedColumnWidth}\" align=\"${align}\">\n      <div class=\"demo-cell\" grid-span=\"6\"></div>\n      <div class=\"demo-cell\" grid-span=\"3\"></div>\n      <div class=\"demo-cell\" grid-span=\"2\"></div>\n      <div class=\"demo-cell\" grid-span=\"1\"></div>\n      <div class=\"demo-cell\" grid-span=\"3\"></div>\n      <div class=\"demo-cell\" grid-span=\"1\"></div>\n      <div class=\"demo-cell\" grid-span=\"8\"></div>\n    </md-layout-grid>\n  `,\n  parameters: {\n    docs: {\n      description: {\n        story:\n            'The `grid-span` attribute can be used to specify the number of columns a cell should span.',\n      },\n    },\n  },\n};\nexport const Nested: LayoutGridStory = {\n  render: ({fixedColumnWidth, align}) => html`\n    <md-layout-grid class=\"demo-grid\" ?fixedColumnWidth=\"${fixedColumnWidth}\" align=\"${align}\">\n      <md-layout-grid-inner class=\"demo-cell demo-grid\" style=\"min-width: 0\">\n        <div class=\"demo-cell\"></div>\n        <div class=\"demo-cell\"></div>\n      </md-layout-grid-inner>\n      <div class=\"demo-cell\"></div>\n      <div class=\"demo-cell\"></div>\n    </md-layout-grid>\n  `,\n  parameters: {\n    docs: {\n      description: {\n        story: dedent`\n                When your contents need extra structure that cannot be supported by single layout grid, you can nest layout grid within each other. To nest layout grid, add a new \\`md-layout-grid\\` with attribute \\`inner\\` to wrap around nested content.\n                The nested layout grid behaves exactly like when they are not nested, e.g, they have 12 columns on desktop, 8 columns on tablet and 4 columns on phone. They also use the **same gutter size** as their parents, but margins are not re-introduced since they are living within another cell.\n                However, the Material Design guidelines do not recommend having a deeply nested grid as it might mean an over complicated UX.\n            `,\n      },\n    },\n  },\n};\nexport const GridAlignment: LayoutGridStory = {\n  render: ({fixedColumnWidth, align}) => html`\n    <md-layout-grid\n        class=\"demo-grid demo-grid--alignment\"\n        ?fixedColumnWidth=\"${fixedColumnWidth}\"\n        align=\"${align}\"\n    >\n      <div class=\"demo-cell\"></div>\n      <div class=\"demo-cell\"></div>\n      <div class=\"demo-cell\"></div>\n    </md-layout-grid>\n  `,\n  args: {\n    align: 'left',\n  },\n  parameters: {\n    docs: {\n      description: {\n        story:\n            'Align the grid to left or right (in this example left). This requires a max-width on the top-level grid element.',\n      },\n    },\n  },\n};\nexport const GridCellsAlignment: LayoutGridStory = {\n  render: ({fixedColumnWidth, align}) => html`\n    <md-layout-grid\n        class=\"demo-grid demo-grid--cell-alignment\"\n        ?fixedColumnWidth=\"${fixedColumnWidth}\"\n        align=\"${align}\"\n    >\n      <div class=\"demo-cell demo-cell--alignment\" grid-align=\"top\"></div>\n      <div class=\"demo-cell demo-cell--alignment\" grid-align=\"middle\"></div>\n      <div class=\"demo-cell demo-cell--alignment\" grid-align=\"bottom\"></div>\n    </md-layout-grid>\n  `,\n  parameters: {\n    docs: {\n      description: {\n        story:\n            'Align the cells grid to top, middle or bottom. This requires a max-width on the top-level grid element.',\n      },\n    },\n  },\n};\nexport const GridCellsOrder: LayoutGridStory = {\n  render: ({fixedColumnWidth, align}) => html`\n    <md-layout-grid class=\"demo-grid\" ?fixedColumnWidth=\"${fixedColumnWidth}\" align=\"${align}\">\n      <div class=\"demo-cell\" grid-order=\"3\">first</div>\n      <div class=\"demo-cell\" grid-order=\"1\">second</div>\n      <div class=\"demo-cell\" grid-order=\"2\">third</div>\n    </md-layout-grid>\n  `,\n  parameters: {\n    docs: {\n      description: {\n        story: 'Order the cells in the grid',\n      },\n    },\n  },\n};\n"]}