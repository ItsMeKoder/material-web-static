import { __decorate } from "tslib";
import '@material/web/ripple/ripple.js';
import '@material/web/focus/focus-ring.js';
import { html, LitElement } from 'lit';
import { queryAssignedElements } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { property } from 'lit/decorators/property.js';
export class Card extends LitElement {
    constructor() {
        super(...arguments);
        /** Allows the card to be clickable with a ripple effect. */
        this.clickable = false;
    }
    render() {
        return html `
            <div class="${classMap(this.getRenderClasses())}">
                ${this.renderPrimaryAction()}
                ${this.renderActions()}
                <md-elevation shadow></md-elevation>
            </div>`;
    }
    getRenderClasses() {
        return {
            'mdc-card': true
        };
    }
    getPrimaryActionRenderClasses() {
        return {
            'mdc-card__primary-action': true,
            'mdc-card__primary-action--disabled': this.disabled
        };
    }
    stopActionPropagation(action) {
        const events = ['click', 'pointerdown', 'pointerup', 'pointercancel', 'pointerleave', 'pointerenter', 'contextmenu'];
        for (const event of events) {
            action.addEventListener(event, (e) => {
                e.stopPropagation();
            });
        }
        action.addEventListener('focus', () => this.blur());
        action.addEventListener('blur', () => this.focus());
    }
    getRenderActionsClasses() {
        return {
            'mdc-card__actions': true,
        };
    }
    update(_changedProperties) {
        if (_changedProperties.has('clickable')) {
            this.disabled = !this.clickable;
        }
        super.update(_changedProperties);
    }
    renderPrimaryAction() {
        return html `
            <div id="primary-action"
                 class="${classMap(this.getPrimaryActionRenderClasses())}"
                 tabindex="0"
                 aria-label="${this.ariaLabel}">
                 ${this.renderRipple()}
                ${this.renderFocusRing()}
                <slot></slot>
            </div>`;
    }
    getRippleRenderClasses() {
        return {
            'mdc-card__ripple': true
        };
    }
    /** @soyTemplate */
    renderFocusRing() {
        return html `
            <md-focus-ring for="primary-action"></md-focus-ring>`;
    }
    onButtonSlotChanged() {
        for (const button of this.buttons) {
            button.classList.add('mdc-card__action');
            button.classList.add('mdc-card__action--button');
            this.stopActionPropagation(button);
        }
        this.requestUpdate();
    }
    onIconSlotChanged() {
        for (const icon of this.icons) {
            icon.classList.add('mdc-card__action');
            icon.classList.add('mdc-card__action--icon');
            this.stopActionPropagation(icon);
        }
        this.requestUpdate();
    }
    renderRipple() {
        return html `<md-ripple class="${classMap(this.getRippleRenderClasses())}" ?disabled=${this.disabled}></md-ripple>`;
    }
    wrapButtonSlot(buttonSlotTemplate) {
        if (this.buttons.length > 0) {
            return html `
                <div class="mdc-card__action-buttons">
                    ${buttonSlotTemplate}
                </div>`;
        }
        return buttonSlotTemplate;
    }
    wrapIconSlot(iconSlotTemplate) {
        if (this.icons.length > 0) {
            return html `
                <div class="mdc-card__action-icons">
                    ${iconSlotTemplate}
                </div>`;
        }
        return iconSlotTemplate;
    }
    renderActions() {
        const buttonSlotTemplate = html `<slot name="button" @slotchange=${this.onButtonSlotChanged}></slot>`;
        const iconSlotTemplate = html `<slot name="icon" @slotchange=${this.onIconSlotChanged}></slot>`;
        if (this.icons.length > 0 || this.buttons.length > 0) {
            return html `
            <div class="${classMap(this.getRenderActionsClasses())}"
                ${this.renderRipple()}>
                ${this.wrapButtonSlot(buttonSlotTemplate)}
                ${this.wrapIconSlot(iconSlotTemplate)}
            </div>`;
        }
        return html `
          ${buttonSlotTemplate}
          ${iconSlotTemplate}
      `;
    }
}
__decorate([
    property({ type: Boolean, reflect: true })
], Card.prototype, "clickable", void 0);
__decorate([
    queryAssignedElements({ slot: 'button' })
], Card.prototype, "buttons", void 0);
__decorate([
    queryAssignedElements({ slot: 'icon' })
], Card.prototype, "icons", void 0);
//# sourceMappingURL=card.js.map