{"version":3,"file":"layout-grid.js","sourceRoot":"","sources":["layout-grid.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,IAAI,EAAE,UAAU,EAAC,MAAM,KAAK,CAAC;AACrC,OAAO,EAAC,QAAQ,EAAC,MAAM,4BAA4B,CAAC;AACpD,OAAO,EAAY,QAAQ,EAAC,MAAM,6BAA6B,CAAC;AAWhE,MAAM,OAAO,UAAW,SAAQ,UAAU;IAA1C;;QACI;;WAEG;QACwB,qBAAgB,GAAG,KAAK,CAAC;QAEpD;;WAEG;QACuB,UAAK,GAAgC,QAAQ,CAAC;IA0B5E,CAAC;IAxBG,gBAAgB;QACZ,OAAO;YACH,iBAAiB,EAAE,IAAI;YACvB,qCAAqC,EAAE,IAAI,CAAC,gBAAgB;YAC5D,6BAA6B,EAAE,IAAI,CAAC,KAAK,KAAK,MAAM;YACpD,8BAA8B,EAAE,IAAI,CAAC,KAAK,KAAK,OAAO;SACzD,CAAC;IACN,CAAC;IAEQ,MAAM;QACX,OAAO,IAAI,CAAA;0BACO,QAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAe,CAAC;kBACtD,IAAI,CAAC,UAAU,EAAE;;SAE1B,CAAC;IACN,CAAC;IAED,UAAU;QACN,OAAO,IAAI,CAAA;;;;SAIV,CAAC;IACN,CAAC;CACJ;AA/B8B;IAA1B,QAAQ,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC;oDAA0B;AAK1B;IAAzB,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;yCAA+C","sourcesContent":["import {html, LitElement} from 'lit';\nimport {property} from 'lit/decorators/property.js';\nimport {ClassInfo, classMap} from 'lit/directives/class-map.js';\n\nexport interface LayoutGridAttributes {\n    'grid-span'?: number,\n    'grid-span-desktop'?: number,\n    'grid-span-tablet'?: number,\n    'grid-span-phone'?: number,\n    'grid-align'?: 'top' | 'middle' | 'bottom',\n    'grid-order'?: number,\n}\n\nexport class LayoutGrid extends LitElement {\n    /**\n     * You can designate each column to have a certain width. The column width can be specified through the CSS custom property `--mdc-layout-grid-column-width-{screen_size}`. The column width is set to 72px on all devices by default.\n     */\n    @property({type: Boolean}) fixedColumnWidth = false;\n\n    /**\n     * The grid is by default center aligned. You can set this attribute to `left` or `right` to change this behavior. Note, these modifiers will have no effect when the grid already fills its container.\n     */\n    @property({type: String}) align: 'center' | 'left' | 'right' = 'center';\n\n    getRenderClasses(): Record<string, boolean> {\n        return {\n            'mdc-layout-grid': true,\n            'mdc-layout-grid--fixed-column-width': this.fixedColumnWidth,\n            'mdc-layout-grid--align-left': this.align === 'left',\n            'mdc-layout-grid--align-right': this.align === 'right',\n        };\n    }\n\n    override render() {\n        return html`\n            <div class=\"${classMap(this.getRenderClasses() as ClassInfo)}\">\n                ${this.renderSlot()}\n            </div>\n        `;\n    }\n\n    renderSlot() {\n        return html`\n            <md-layout-grid-inner>\n                <slot></slot>\n            </md-layout-grid-inner>\n        `;\n    }\n}\n"]}