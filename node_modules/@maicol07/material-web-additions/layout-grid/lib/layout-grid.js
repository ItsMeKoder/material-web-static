import { __decorate } from "tslib";
import { html, LitElement } from 'lit';
import { property } from 'lit/decorators/property.js';
import { classMap } from 'lit/directives/class-map.js';
export class LayoutGrid extends LitElement {
    constructor() {
        super(...arguments);
        /**
         * You can designate each column to have a certain width. The column width can be specified through the CSS custom property `--mdc-layout-grid-column-width-{screen_size}`. The column width is set to 72px on all devices by default.
         */
        this.fixedColumnWidth = false;
        /**
         * The grid is by default center aligned. You can set this attribute to `left` or `right` to change this behavior. Note, these modifiers will have no effect when the grid already fills its container.
         */
        this.align = 'center';
    }
    getRenderClasses() {
        return {
            'mdc-layout-grid': true,
            'mdc-layout-grid--fixed-column-width': this.fixedColumnWidth,
            'mdc-layout-grid--align-left': this.align === 'left',
            'mdc-layout-grid--align-right': this.align === 'right',
        };
    }
    render() {
        return html `
            <div class="${classMap(this.getRenderClasses())}">
                ${this.renderSlot()}
            </div>
        `;
    }
    renderSlot() {
        return html `
            <md-layout-grid-inner>
                <slot></slot>
            </md-layout-grid-inner>
        `;
    }
}
__decorate([
    property({ type: Boolean })
], LayoutGrid.prototype, "fixedColumnWidth", void 0);
__decorate([
    property({ type: String })
], LayoutGrid.prototype, "align", void 0);
//# sourceMappingURL=layout-grid.js.map